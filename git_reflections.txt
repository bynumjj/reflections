
LESSON 1

1.  How did viewing a diff between two versions of a file help you see the bug that was introduced?

Identifying the lines of code that had been changed allowed me to search for the bug more efficiently, as I did not have to review the entire file.



2.  How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

It allows you to save versions that have working code you might have corrupted through editing in subsequent drafts. And it allows you to compare the features and functionality of different versions.  And it makes it easier to identify errors.



3.  What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

Committing manually allows you to create versions based on meaningful changes to the drafts rather than arbitrary criteria.



4. Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

When editing code, it is likely that you’ll have multiple files related to the same project that need to be bundled together.



5.  How can you use the commands git log and git diff to view the history of files?

Git log lists all the commits made to a file in chronological order.  Git diff will compare any two versions based on their ids.



6.  How might using version control make you more confident to make changes that could break something?

Because I can always return to a previous version that doesn't have the bug.



7.  Now that you have your workspace set up, what do you want to try using Git for?

Keeping track of versions of projects, publishing my work, collaborating with others.



LESSON 2

1. What happens when you initialize a repository? Why do you need to do it?

You create an empty repository that can be used to store each update of your file(s) related to a project provide a chronological list of those updates (commits).


2. How is the staging area different from the working directory and the repository?  What value do you think it offers?

It's a transitional area that allows you to store provisional alterations to the files before committing final versions.



3. How can you use the staging area to make sure you have one commit per logical change?

You can use $ git diff --staged to compare the files in the staging area to the last draft in the repository.  You can then review the edits to determine if they are related to one logical change.


4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When you want to create concurrent versions of a project, such as when adding an experimental feature, or working in collaboration, where your changes would need to be approved by the project owner before being added to the master.



5. How do the diagrams help you visualize the branch structure?

By creating a graphic layout of how the various commits and branches are related, it clarifies the sequence and subject matter.



6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

It adds changes from one version that you would like to incorporate into another, for example, adding a new feature, or fixing a bug.  The diagram allows you to track history of each version separately.



7. What are the pros and cons of Git’s automatic merging vs.always doing merges manually?


Automatically merging is a time saver and leaves less opportunity for mistakes.  Manually resolves conflicts that are too complicated for merge to handle automatically. such as when two versions have incompatible changes to the same lines of code.



LESSON 3

1. When would you want to use a remote repository rather than keeping all your work local?

When working from another computer or collaborating with someone else.


2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

You may want to review the changes first to make sure they'e compatible with your goals for the project, or don't conflict with the edits you're making locally.


3. Describe the differences between forks, clones and branches.  When would you use one instead of the other?

Forking is used to copy a repository from one github location to another.  It's used to create your own version of a repository from someone else\'92s while leaving the original unchanged.

Cloning is used to copy a repository from github to a local computer, or from one local location to another.  Cloning is used to create a repository that can be edited locally.

Branching is used to create divergent paths for project versions on one computer.  Branching is used when you'd like to make experimental modifications to a project while keeping the principal version intact.




